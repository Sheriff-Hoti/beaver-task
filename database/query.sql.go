// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const countTasks = `-- name: CountTasks :one
SELECT COUNT(*) AS total
FROM tasks
`

func (q *Queries) CountTasks(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTasks)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    title,
    description,
    due_date,
    priority,
    tags,
    parent_id,
    completed_at,
    progress,
    archived,
    status
) VALUES (
    ?1,
    ?2,
    ?3,
    COALESCE(?4, 5),    
    ?5,
    ?6,
    ?7,
    ?8,
    COALESCE(?9, 0),
    COALESCE(?10, 'NOT STARTED')
)
RETURNING id, title, description, created_at, updated_at, due_date, priority, tags, parent_id, completed_at, progress, archived, status
`

type CreateTaskParams struct {
	Title       string
	Description sql.NullString
	DueDate     sql.NullTime
	Priority    interface{}
	Tags        sql.NullString
	ParentID    sql.NullInt64
	CompletedAt sql.NullTime
	Progress    sql.NullInt64
	Archived    interface{}
	Status      interface{}
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Priority,
		arg.Tags,
		arg.ParentID,
		arg.CompletedAt,
		arg.Progress,
		arg.Archived,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DueDate,
		&i.Priority,
		&i.Tags,
		&i.ParentID,
		&i.CompletedAt,
		&i.Progress,
		&i.Archived,
		&i.Status,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
;

SELECT id, title, description, created_at, updated_at, due_date, priority, tags, parent_id, completed_at, progress, archived, status
FROM tasks
ORDER BY created_at DESC
LIMIT 15
OFFSET ?1
`

func (q *Queries) ListTasks(ctx context.Context, offset int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DueDate,
			&i.Priority,
			&i.Tags,
			&i.ParentID,
			&i.CompletedAt,
			&i.Progress,
			&i.Archived,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
